{
  "name": "Scalpel",
  "tagline": "Auto wired framework for Android",
  "body": "### Maven version\r\n[https://bintray.com/nickandroid/maven/scalpel]\r\n\r\n### Features\r\n- Auto find views, int, String, bool, array...\r\n- OnClick listener, action, args.\r\n- Auto bind/unbind AIDL service.\r\n- Auto (un)register receiver.\r\n- Auto find System services, PowerManager, TelephonyManager, etc\r\n- Auto require permission (for SDK above M).\r\n- Auto require full screen for Activity.\r\n- Auto recycle fields for Activity.\r\n\r\n### Usage\r\n\r\nAdd dependencies\r\n``` java\r\ndependencies {\r\n    compile 'com.nick.scalpel:scalpel:0.7'\r\n}\r\n```\r\n\r\n1. Configurations customize:\r\n``` java\r\npublic class MyApplication extends Application {\r\n    @Override\r\n    public void onCreate() {\r\n        super.onCreate();\r\n        Scalpel.getDefault().config(Configuration.builder().autoFindIfNull(true).debug(true).logTag(\"Scalpel\").build());\r\n    }\r\n}\r\n```\r\n\r\n2. Use auto activity or wire things manually\r\n``` java\r\npublic class MainActivity extends ScalpelAutoActivity {}\r\n\r\npublic class MyFragment extends ScalpelAutoFragment {}\r\n\r\npublic class MyService extends ScalpelAutoService {}\r\n```\r\n\r\n``` java\r\npublic class ViewHolder {\r\n    @AutoFound(id = R.id.toolbar) // Same as @AutoFound(id = R.id.toolbar, type = Type.Auto)\r\n            Toolbar toolbar;\r\n\r\n    @AutoFound(id = R.id.fab)\r\n    @OnClick(listener = \"mokeListener\")\r\n    FloatingActionButton fab;\r\n\r\n    @OnClick(listener = \"mokeListener\")\r\n    @AutoFound(id = R.id.hello)\r\n    TextView hello;\r\n\r\n    @AutoFound(id = R.integer.size, type = AutoFound.Type.Integer)\r\n    int size;\r\n\r\n    @AutoFound(id = R.color.colorAccent, type = AutoFound.Type.Color)\r\n    int color;\r\n\r\n    @AutoFound(id = R.string.app_name, type = AutoFound.Type.String)\r\n    String text;\r\n\r\n    @AutoFound(id = R.bool.boo, type = AutoFound.Type.Bool)\r\n    boolean bool;\r\n\r\n    @AutoFound(id = R.array.strs)\r\n    String[] strs;\r\n\r\n    @AutoFound(id = R.array.ints, type = AutoFound.Type.Auto)\r\n    int[] ints;\r\n\r\n    @AutoFound\r\n    PowerManager pm;\r\n\r\n    @AutoFound\r\n    TelephonyManager tm;\r\n\r\n    @AutoFound\r\n    NotificationManager nm;\r\n\r\n    @AutoFound\r\n    AccountManager accountManager;\r\n\r\n    @AutoFound\r\n    ActivityManager am;\r\n\r\n    @AutoFound\r\n    AlarmManager alarmManager;\r\n\r\n    private View.OnClickListener mokeListener = new View.OnClickListener() {\r\n        @Override\r\n        public void onClick(View v) {\r\n            Snackbar.make(v, \"Replace with your own actions\", Snackbar.LENGTH_LONG)\r\n                    .setAction(\"Action\", null).show();\r\n        }\r\n    };\r\n\r\n    ViewHolder(Context context) {\r\n        View rootV = LayoutInflater.from(context).inflate(R.layout.activity_main, null);\r\n        Scalpel.getDefault().wire(rootV, this);\r\n\r\n        log(toolbar, fab, hello, size, color, text, bool, strs, ints, am, pm, tm, nm, accountManager, alarmManager);\r\n    }\r\n}\r\n```\r\n\r\n### Example\r\n``` java\r\n@AutoRequestFullScreen(viewToTriggerRestore = R.id.hello)\r\n@AutoRequirePermission(requestCode = 100, permissions = {android.Manifest.permission.READ_EXTERNAL_STORAGE,\r\n        Manifest.permission.CALL_PHONE})\r\npublic class MainActivity extends ScalpelAutoActivity implements AutoBind.Callback {\r\n\r\n    @AutoFound(id = R.id.toolbar, type = AutoFound.Type.View)\r\n    Toolbar toolbar;\r\n\r\n    @AutoFound(id = R.id.fab)\r\n    @OnTouch(action = \"showSnack\", args = {\"Hello, I am a fab!\", \"Nick\"})\r\n    FloatingActionButton fab;\r\n\r\n    @AutoFound(id = R.id.hello)\r\n    @OnClick(listener = \"mokeListener\")\r\n    TextView hello;\r\n\r\n    @AutoFound(id = R.integer.size, type = AutoFound.Type.Integer)\r\n    int size;\r\n\r\n    @AutoFound(id = R.color.colorAccent, type = AutoFound.Type.Color)\r\n    int color;\r\n\r\n    @AutoFound(id = R.string.app_name, type = AutoFound.Type.String)\r\n    String text;\r\n\r\n    @AutoFound(id = R.bool.boo, type = AutoFound.Type.Bool)\r\n    boolean bool;\r\n\r\n    @AutoFound(id = R.array.strs, type = AutoFound.Type.StringArray)\r\n    String[] strs;\r\n\r\n    @AutoFound(id = R.array.ints, type = AutoFound.Type.IntArray)\r\n    int[] ints;\r\n\r\n    @AutoFound\r\n    PowerManager pm;\r\n\r\n    @AutoFound\r\n    TelephonyManager tm;\r\n\r\n    @AutoFound\r\n    NotificationManager nm;\r\n\r\n    @AutoFound\r\n    AccountManager accountManager;\r\n\r\n    @AutoFound\r\n    ActivityManager am;\r\n\r\n    @AutoFound\r\n    AlarmManager alarmManager;\r\n\r\n    @AutoBind(action = \"com.nick.service\", pkg = \"com.nick.scalpeldemo\", callback = \"this\"\r\n            , autoUnbind = true)\r\n    IMyAidlInterface mService;\r\n\r\n    @AutoRegister(actions = {Intent.ACTION_SCREEN_ON, Intent.ACTION_SCREEN_OFF, \"com.nick.service.bind\"}\r\n            , autoUnRegister = true)\r\n    BroadcastReceiver receiver = new BroadcastReceiver() {\r\n        @Override\r\n        public void onReceive(Context context, Intent intent) {\r\n            Log.d(\"Scalpel.Demo\", \"onReceive, intent = \" + intent.getAction());\r\n        }\r\n    };\r\n\r\n    @AutoRecycle\r\n    Bitmap bitmap;\r\n}\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}